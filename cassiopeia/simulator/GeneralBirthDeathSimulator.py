"""
A general simulator for a birth-death tree simulation process, including 
fitness. Takes any given distribution on waiting times and fitness 
mutations.
"""

import networkx as nx
import numpy as np

from cassiopeia.simulator import TreeSimulator

class GeneralBirthDeathError(Exception):
    """An Exception class for all exceptions generated by the
    GeneralBirthDeathSimulator
    """
    pass


class GeneralBirthDeathSimulator(TreeSimulator):

    def simulate_tree(
        self,
        birth_waiting_dist,
        death_waiting_dist,
        birth_scale_param,
        fitness_num_dist=None,
        fitness_strength_dist=None,
        num_extant=None,
        experiment_time=None,
    ):
        if num_extant is None and experiment_time is None:
            raise GeneralBirthDeathError("Please specify a stopping condition")

        if fitness_num_dist is not None and fitness_strength_dist is None:
            raise GeneralBirthDeathError("Please specify a fitness strength distribution")

        unique_id = 0
        tree = nx.DiGraph()
        tree.add_node(unique_id)
        # Keep a list of extant lineages and a dict of lineage specific parameters
        # for each
        current_lineages = []
        current_lineages.append(
            {
                "id": unique_id,
                "birth_scale": birth_scale_param,
                "total_time": 0,
            }
        )
        # Record the scale parameter of each node
        tree.nodes[unique_id]["birth_scale"] = birth_scale_param
        while len(current_lineages) > 0:
            lineage = current_lineages.pop(0)  # Make sure to pop from front
            birth_waiting_time = birth_waiting_dist(lineage["birth_scale"])
            death_waiting_time = death_waiting_dist()
            # Take the minimum waiting time to dictate which event happens
            if birth_waiting_time < death_waiting_time:
                # If time is the stopping condition, if the next birth would
                # happen after the time of the experiment, cut the lineage off
                # at the total stopping time and produce no additional daughters
                if experiment_time:
                    if (
                        birth_waiting_time + lineage["total_time"]
                        >= experiment_time
                    ):
                        parent = list(tree.predecessors(lineage["id"]))[0]
                        tree.edges[parent, lineage["id"]]["weight"] += (
                            experiment_time - lineage["total_time"]
                        )
                        continue
                # Determine the number of mutations acquired, and then determine
                # their strength
                total_birth_mutation_strength = 1
                if fitness_num_dist:
                    num_mutations = int(fitness_num_dist())
                    for _ in range(num_mutations):
                        total_birth_mutation_strength *= fitness_strength_dist()
                # Add two daughters with updated total time, and scale parameters
                for i in range(unique_id + 1, unique_id + 3):
                    tree.add_node(i)
                    current_lineages.append(
                        {
                            "id": i,
                            "birth_scale": lineage["birth_scale"]
                            * total_birth_mutation_strength,
                            "total_time": lineage["total_time"]
                            + birth_waiting_time,
                        }
                    )
                    tree.add_edge(lineage["id"], i, weight=birth_waiting_time)
                    tree.nodes[i]["birth_scale"] = lineage["birth_scale"] * total_birth_mutation_strength
                unique_id += 2
                # If number of extant lineages is the stopping criterion, at the
                # first instance of having n extant tips, stop the experiment
                # and set the total lineage time for each lineage to be equal to
                # the maximum, to produce ultrametric trees
                if num_extant:
                    if len(current_lineages) == num_extant:
                        max_total_time = 0
                        for remaining_lineage in current_lineages:
                            if remaining_lineage["total_time"] > max_total_time:
                                max_total_time = remaining_lineage["total_time"]
                        for remaining_lineage in current_lineages:
                            parent = list(tree.predecessors(remaining_lineage["id"]))[0]
                            tree.edges[parent, remaining_lineage["id"]]["weight"] += (
                                max_total_time - remaining_lineage["total_time"]
                            )
                        current_lineages = []

            else:
                # If the lineage dies, prune the entire lineage from the tree
                self.remove_and_prune(lineage["id"], tree)
            

        if len(tree.nodes) == 1:
            raise GeneralBirthDeathError("All lineages dead before end of experiment")

        return tree


    def remove_and_prune(self, node, network):
        if len(network.nodes) > 1:
            curr_parent = list(network.predecessors(node))[0]
            network.remove_node(node)
            while (
                network.out_degree(curr_parent) < 1
                and network.in_degree(curr_parent) > 0
            ):
                next_parent = list(network.predecessors(curr_parent))[0]
                network.remove_node(curr_parent)
                curr_parent = next_parent


"""Example use snippet:
note that numpy uses a different parameterization of the exponential with the scale parameter, which is 1/rate


birth_waiting_dist = np.random.exponential
death_waiting_dist = np.random.exponential(1.5)
birth_scale_param = 0.5
fitness_num_dist = lambda: 1 if np.random.uniform() > 0.5 else 0
fitness_strength_dist = lambda: 2 ** np.random.uniform(-1,1)

tree = generate_birth_death(
    birth_waiting_dist,
    death_waiting_dist,
    birth_scale_param,
    fitness_num_dist = fitness_num_dist,
    fitness_strength_dist=fitness_strength_dist,
    num_extant=8,
#     experiment_time = 1
)

"""